import React, { Component } from 'react'
import { Mutation, MutationFn } from 'react-apollo'
import { Button, DatePicker, Input, Modal, RadioGroup } from 'vtex.styleguide'
import ADD_QUICK_QUOTE from '../mutations/addQuickQuote.gql'
import { Profile } from '../utils/constants'

interface Product {
  id: number
  brandId: number
}

interface Props {
  // company: string
  // email: string
  // name: string
  // location: string
  // postalCode: string
  // product: Product
  // brand: string
  // targetPrice: number
  // competitor: string
  // quantity: number
  // needByDate: string
  profile: Profile
}

interface State {
  company: string
  companyValid: boolean
  email: string
  emailValid: boolean
  isModalOpen: boolean
  name: string
  nameValid: boolean
  location: string
  locationValid: boolean
  postalCode: string
  postalCodeValid: boolean
  productId: number
  productIdValid: boolean
  brandId: number
  brandIdValid: boolean
  targetPrice: number
  targetPriceValid: boolean
  competitor: string
  competitorValid: boolean
  quantity: number
  quantityValid: boolean
  needByDate: string
  needByDateValid: boolean
  formErrors: FormErrors
  formValid: boolean
}

interface FormErrors {
  company: string
  email: string
  name: string
  location: string
  postalCode: string
  productId: string
  brandId: string
  targetPrice: string
  competitor: string
  quantity: string
  needByDate: string
}

class QuoteForm extends Component<Props, State> {
  constructor(props: Props) {
    super(props)
    this.state = {
      brandId: null,
      brandIdValid: false,
      company: props.profile.corporateName,
      companyValid: true,
      competitor: '',
      competitorValid: false,
      email: props.profile.email,
      emailValid: true,
      formErrors: {
        brandId: '',
        company: '',
        competitor: '',
        email: '',
        location: '',
        name: '',
        needByDate: '',
        postalCode: '',
        productId: '',
        quantity: '',
        targetPrice: '',
      },
      formValid: false,
      isModalOpen: false,
      location: '',
      locationValid: false,
      name: `${props.profile.firstName} ${props.profile.lastName}`,
      nameValid: true,
      needByDate: '',
      needByDateValid: false,
      postalCode: '',
      postalCodeValid: false,
      productId: null,
      productIdValid: false,
      quantity: 0,
      quantityValid: false,
      targetPrice: 0,
      targetPriceValid: false,
    }
    this.handleModalToggle = this.handleModalToggle.bind(this)
    this.handleConfirmation = this.handleConfirmation.bind(this)
  }

  public render() {
    return (
      <Mutation mutation={ADD_QUICK_QUOTE}>
        {(save, { loading: isSaving }) => (
          <div>
            <Button onClick={this.handleModalToggle}>Open modal</Button>

            <Modal centered isOpen={this.state.isModalOpen} onClose={this.handleModalToggle}>
              <h4 className="t-heading-4 mt0">Get a Quick Response from Bisco</h4>

              <form>
                <div className="mb5">
                  <Input
                    name="company"
                    label="Company"
                    value={this.state.company}
                    error={!this.state.companyValid}
                    errorMessage={this.state.formErrors.company}
                    onChange={(event: any) => this.handleUserInput(event)}
                  />
                </div>

                <div className="mb5">
                  <Input
                    name="email"
                    label="Email"
                    value={this.state.email}
                    error={!this.state.emailValid}
                    errorMessage={this.state.formErrors.email}
                    onChange={(event: any) => this.handleUserInput(event)}
                  />
                </div>

                <div className="mb5">
                  <Input
                    name="name"
                    label="Name"
                    value={this.state.name}
                    error={!this.state.nameValid}
                    errorMessage={this.state.formErrors.name}
                    onChange={(event: any) => this.handleUserInput(event)}
                  />
                </div>

                <div className="mb5">
                  <RadioGroup
                    name="location"
                    options={[
                      { value: 'United States', label: 'United States' },
                      { value: 'Canada', label: 'Canada' },
                      { value: 'Other', label: 'Other' },
                    ]}
                    value={this.state.location}
                    onChange={e => this.setState({ location: e.currentTarget.value })}
                  />
                </div>

                <div className="mb5">
                  <Input
                    name="postalCode"
                    label="Postal Code"
                    value={this.state.postalCode}
                    error={!this.state.postalCodeValid}
                    errorMessage={this.state.formErrors.postalCode}
                    onChange={(event: any) => this.handleUserInput(event)}
                  />
                </div>

                <div className="mb5">
                  <Input
                    name="productName"
                    label="Product Name"
                    disabled={true}
                    value={this.state.productId}
                    error={!this.state.productIdValid}
                    errorMessage={this.state.formErrors.productId}
                    onChange={(event: any) => this.handleUserInput(event)}
                  />
                </div>

                <div className="mb5">
                  <Input
                    name="brandName"
                    label="Brand Name"
                    disabled={true}
                    value={this.state.brandId}
                    error={!this.state.brandIdValid}
                    errorMessage={this.state.formErrors.brandId}
                    onChange={(event: any) => this.handleUserInput(event)}
                  />
                </div>

                <div className="mb5">
                  <Input
                    name="targetPrice"
                    label="Target Price"
                    value={this.state.targetPrice}
                    error={!this.state.targetPriceValid}
                    errorMessage={this.state.formErrors.targetPrice}
                    onChange={(event: any) => this.handleUserInput(event)}
                  />
                </div>

                <div className="mb5">
                  <Input
                    name="competitor"
                    label="Competitor"
                    value={this.state.competitor}
                    error={!this.state.competitorValid}
                    errorMessage={this.state.formErrors.competitor}
                    onChange={(event: any) => this.handleUserInput(event)}
                  />
                </div>

                <div className="mb5">
                  <Input
                    name="quantity"
                    label="Quantity"
                    value={this.state.quantity}
                    error={!this.state.quantityValid}
                    errorMessage={this.state.formErrors.quantity}
                    onChange={(event: any) => this.handleUserInput(event)}
                  />
                </div>

                <div className="mb5">
                  <DatePicker
                    label="Need by Date"
                    value={this.state.needByDate}
                    onChange={this.handleChange}
                    locale="pt-BR"
                  />
                </div>

                <Button
                  variation="primary"
                  disabled={!this.state.formValid}
                  onClick={this.getSaveHandler(save)}
                  isLoading={isSaving}>
                  Submit
                </Button>
              </form>
            </Modal>
          </div>
        )}
      </Mutation>
    )
  }

  public handleModalToggle() {
    this.setState({ isModalOpen: !this.state.isModalOpen })
  }

  public handleConfirmation() {
    this.handleModalToggle()
  }

  public handleChange(date: string) {
    this.setState({
      needByDate: date,
    })
  }

  public handleUserInput(e: { target: { name: string; value: string } }) {
    const { name, value } = e.target
    this.setState({ [name]: value } as any, () => {
      this.validateField(name, value)
    })
  }

  public validateField(fieldName: string, value: any) {
    const fieldValidationErrors = this.state.formErrors
    let companyValid = this.state.companyValid
    let emailValid = this.state.emailValid
    let nameValid = this.state.nameValid
    let locationValid = this.state.locationValid
    let postalCodeValid = this.state.postalCodeValid
    let productIdValid = this.state.productIdValid
    let brandIdValid = this.state.brandIdValid
    let targetPriceValid = this.state.targetPriceValid
    let competitorValid = this.state.competitorValid
    let quantityValid = this.state.quantityValid
    let needByDateValid = this.state.needByDateValid

    switch (fieldName) {
      case 'company':
        companyValid = value.length >= 1
        fieldValidationErrors.company = companyValid ? '' : ' is required'
        break
      case 'email':
        emailValid = value.match(/^([\w.%+-]+)@([\w-]+\.)+([\w]{2,})$/i)
        fieldValidationErrors.email = emailValid ? '' : ' is invalid'
        break
      case 'name':
        nameValid = value.length >= 1
        fieldValidationErrors.name = nameValid ? '' : ' is required'
        break
      case 'location':
        locationValid = value.length >= 1
        fieldValidationErrors.location = locationValid ? '' : ' is required'
        break
      case 'postalCode':
        postalCodeValid = value.length >= 1
        fieldValidationErrors.postalCode = postalCodeValid ? '' : ' is required'
        break
      case 'productId':
        productIdValid = value.length >= 1
        fieldValidationErrors.productId = productIdValid ? '' : ' is required'
        break
      case 'brandId':
        brandIdValid = value.length >= 1
        fieldValidationErrors.brandId = brandIdValid ? '' : ' is required'
        break
      case 'targetPrice':
        targetPriceValid = value.length >= 1
        fieldValidationErrors.targetPrice = targetPriceValid ? '' : ' is required'
        break
      case 'competitor':
        competitorValid = value.length >= 1
        fieldValidationErrors.competitor = competitorValid ? '' : ' is required'
        break
      case 'quantity':
        quantityValid = value.length >= 1
        fieldValidationErrors.quantity = quantityValid ? '' : ' is required'
        break
      case 'needByDate':
        needByDateValid = value.length >= 1
        fieldValidationErrors.needByDate = needByDateValid ? '' : ' is required'
        break
      default:
        break
    }
    this.setState(
      {
        brandIdValid,
        companyValid,
        competitorValid,
        emailValid,
        formErrors: fieldValidationErrors,
        locationValid,
        nameValid,
        needByDateValid,
        postalCodeValid,
        productIdValid,
        quantityValid,
        targetPriceValid,
      },
      this.validateForm
    )
  }

  public validateForm() {
    this.setState({
      formValid:
        this.state.brandIdValid &&
        this.state.companyValid &&
        this.state.competitorValid &&
        this.state.emailValid &&
        this.state.locationValid &&
        this.state.nameValid &&
        this.state.needByDateValid &&
        this.state.postalCodeValid &&
        this.state.productIdValid &&
        this.state.quantityValid &&
        this.state.targetPriceValid,
    })
  }

  public getSaveHandler = (save: MutationFn) => async (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault()
    try {
      await save({
        variables: {
          acronym: 'QuickQuote',
          document: {
            fields: [
              { key: 'company', value: this.state.company },
              { key: 'email', value: this.state.email },
              { key: 'name', value: this.state.name },
              { key: 'location', value: this.state.location },
              { key: 'postalCode', value: this.state.postalCode },
              { key: 'productId', value: this.state.productId },
              { key: 'targetPrice', value: this.state.targetPrice },
              { key: 'competitor', value: this.state.competitor },
              { key: 'quantity', value: this.state.quantity },
              { key: 'needByDate', value: this.state.needByDate },
            ],
          },
        },
      })
    } catch (err) {
      console.log(err)
    }
  }
}

// export default QuoteForm
